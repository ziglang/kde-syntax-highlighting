<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd"
[
    <!ENTITY bin_int "(?:[01](?:_?[01]++)*+)">
    <!ENTITY oct_int "(?:[0-7](?:_?[0-7]++)*+)">
    <!ENTITY dec_int "(?:[0-9](?:_?[0-9]++)*+)">
    <!ENTITY hex_int "(?:[0-9A-Fa-f](?:_?[0-9A-Fa-f]++)*+)">
    <!ENTITY exp_float "(?:[eE][+-]?&dec_int;)">
    <!ENTITY exp_hexfloat "(?:[pP][-+]?&dec_int;)">
]>
<language name="Zig" section="Sources"
          version="2" kateversion="5.62"
          indenter="cstyle"
          extensions="*.zig"
          mimetype=""
          priority="5"
          author="Jonathan Poelen (jonathan.poelen@gmail.com)"
          license="MIT">

<!--
  zig master (0.11.0)
  https://ziglang.org/documentation/master/
  https://ziglang.org/documentation/master/#Grammar
-->

  <highlighting>

    <list name="controlflow">
      <item>break</item>
      <item>catch</item>
      <item>continue</item>
      <item>defer</item>
      <item>else</item>
      <item>errdefer</item>
      <item>for</item>
      <item>if</item>
      <item>orelse</item>
      <item>return</item>
      <item>switch</item>
      <item>try</item>
      <item>unreachable</item>
      <item>while</item>
    </list>

    <list name="modifiers">
      <item>align</item>
      <item>allowzero</item>
      <item>export</item>
      <item>extern</item>
      <item>inline</item>
      <item>noinline</item>
      <item>packed</item>
      <item>volatile</item>
      <item>pub</item>
    </list>

    <list name="preprocessor">
      <item>comptime</item>
      <item>test</item>
      <item>assert</item>
    </list>

    <list name="async">
      <item>async</item>
      <item>await</item>
      <item>resume</item>
      <item>suspend</item>
      <item>nosuspend</item>
    </list>

    <list name="declarations">
      <item>var</item>
      <item>const</item>
      <item>fn</item>
    </list>

    <list name="keywords">
      <item>and</item>
      <item>anyframe</item>
      <item>asm</item>
      <item>enum</item>
      <item>error</item>
      <item>struct</item>
      <item>union</item>
      <item>anytype</item>
      <item>anyerror</item>
      <item>anyopaque</item>
      <item>noalias</item>
      <item>noreturn</item>
      <item>or</item>
      <item>type</item>
      <item>anyerror</item>
      <item>comptime_int</item>
      <item>comptime_float</item>
      <item>callconv</item>
      <item>linksection</item>
      <item>opaque</item>
      <item>threadlocal</item>
      <item>usingnamespace</item>
    </list>

    <list name="types">
      <item>i8</item>
      <item>u8</item>
      <item>i16</item>
      <item>u16</item>
      <item>i32</item>
      <item>u32</item>
      <item>i64</item>
      <item>u64</item>
      <item>i128</item>
      <item>u128</item>
      <item>isize</item>
      <item>usize</item>
      <item>c_short</item>
      <item>c_ushort</item>
      <item>c_int</item>
      <item>c_uint</item>
      <item>c_long</item>
      <item>c_ulong</item>
      <item>c_longlong</item>
      <item>c_ulonglong</item>
      <item>c_longdouble</item>
      <item>f16</item>
      <item>f32</item>
      <item>f64</item>
      <item>f80</item>
      <item>f128</item>
      <item>bool</item>
      <item>void</item>
    </list>

    <list name="constants">
      <item>false</item>
      <item>null</item>
      <item>true</item>
      <item>undefined</item>
    </list>

    <list name="builtinfuncs">
      <item>@addrSpaceCast</item>
      <item>@addWithOverflow</item>
      <item>@alignCast</item>
      <item>@alignOf</item>
      <item>@as</item>
      <item>@asyncCall</item>
      <item>@atomicLoad</item>
      <item>@atomicRmw</item>
      <item>@atomicStore</item>
      <item>@bitCast</item>
      <item>@bitOffsetOf</item>
      <item>@boolToInt</item>
      <item>@bitSizeOf</item>
      <item>@breakpoint</item>
      <item>@mulAdd</item>
      <item>@byteSwap</item>
      <item>@bitReverse</item>
      <item>@offsetOf</item>
      <item>@call</item>
      <item>@cDefine</item>
      <item>@cImport</item>
      <item>@cInclude</item>
      <item>@clz</item>
      <item>@cmpxchgStrong</item>
      <item>@cmpxchgWeak</item>
      <item>@compileError</item>
      <item>@compileLog</item>
      <item>@ctz</item>
      <item>@cUndef</item>
      <item>@divExact</item>
      <item>@divFloor</item>
      <item>@divTrunc</item>
      <item>@embedFile</item>
      <item>@enumToInt</item>
      <item>@errorName</item>
      <item>@errorReturnTrace</item>
      <item>@errorToInt</item>
      <item>@errSetCast</item>
      <item>@export</item>
      <item>@extern</item>
      <item>@fence</item>
      <item>@field</item>
      <item>@fieldParentPtr</item>
      <item>@floatCast</item>
      <item>@floatToInt</item>
      <item>@frame</item>
      <item>@Frame</item>
      <item>@frameAddress</item>
      <item>@frameSize</item>
      <item>@hasDecl</item>
      <item>@hasField</item>
      <item>@import</item>
      <item>@intCast</item>
      <item>@intToEnum</item>
      <item>@intToError</item>
      <item>@intToFloat</item>
      <item>@intToPtr</item>
      <item>@max</item>
      <item>@memcpy</item>
      <item>@memset</item>
      <item>@min</item>
      <item>@wasmMemorySize</item>
      <item>@wasmMemoryGrow</item>
      <item>@mod</item>
      <item>@mulWithOverflow</item>
      <item>@panic</item>
      <item>@popCount</item>
      <item>@prefetch</item>
      <item>@ptrCast</item>
      <item>@ptrToInt</item>
      <item>@rem</item>
      <item>@returnAddress</item>
      <item>@select</item>
      <item>@setAlignStack</item>
      <item>@setCold</item>
      <item>@setEvalBranchQuota</item>
      <item>@setFloatMode</item>
      <item>@setRuntimeSafety</item>
      <item>@shlExact</item>
      <item>@shlWithOverflow</item>
      <item>@shrExact</item>
      <item>@shuffle</item>
      <item>@sizeOf</item>
      <item>@splat</item>
      <item>@reduce</item>
      <item>@src</item>
      <item>@sqrt</item>
      <item>@sin</item>
      <item>@cos</item>
      <item>@tan</item>
      <item>@exp</item>
      <item>@exp2</item>
      <item>@log</item>
      <item>@log2</item>
      <item>@log10</item>
      <item>@fabs</item>
      <item>@floor</item>
      <item>@ceil</item>
      <item>@trunc</item>
      <item>@round</item>
      <item>@subWithOverflow</item>
      <item>@tagName</item>
      <item>@This</item>
      <item>@truncate</item>
      <item>@Type</item>
      <item>@typeInfo</item>
      <item>@typeName</item>
      <item>@TypeOf</item>
      <item>@unionInit</item>
      <item>@Vector</item>
    </list>

    <contexts>
      <context attribute="Normal Text" lineEndContext="#stay" name="Normal Text">
        <DetectSpaces/>
        <AnyChar attribute="Separator Symbol" context="#stay" String=",;"/>
        <Detect2Chars context="MatchComment" char="/" char1="/" lookAhead="true"/>
        <AnyChar attribute="Operator" String="=++%-*/%>&lt;&amp;|^~.?!"/>
        <AnyChar attribute="Symbol" String="()[]"/>
        <AnyChar context="Number" String="0123456789" lookAhead="1"/>
        <DetectChar attribute="Symbol" context="#stay" char="{" beginRegion="Brace1"/>
        <DetectChar attribute="Symbol" context="#stay" char="}" endRegion="Brace1"/>
        <DetectChar attribute="String" context="QString" char="&quot;"/>
        <DetectChar context="Character" char="'" lookAhead="1"/>
        <DetectChar context="BuiltinFunctions" char="@" lookAhead="1"/>
        <Detect2Chars attribute="String" context="MultilineString" char="\" char1="\"/>

        <keyword attribute="Control Flow" String="controlflow"/>
        <keyword attribute="Declaration" String="declarations"/>
        <keyword attribute="Modifier" String="modifiers"/>
        <keyword attribute="Keyword" String="keywords"/>
        <keyword attribute="Type" String="types"/>
        <keyword attribute="Constants" String="constants"/>
        <keyword attribute="Preprocessor" String="preprocessor"/>
        <keyword attribute="Async Keyword" String="async"/>
        <WordDetect attribute="Self Variable" String="self"/>
        <AnyChar context="SpecialType" String="iu" lookAhead="1"/>
        <DetectIdentifier attribute="Normal Text"/>
      </context>


      <context name="MatchComment" attribute="Normal Text" lineEndContext="#pop">
        <IncludeRules context="##Doxygen"/>
        <Detect2Chars attribute="Comment" context="#pop!Comment" char="/" char1="/"/>
      </context>
      <context attribute="Comment" lineEndContext="#pop" name="Comment">
        <DetectSpaces attribute="Comment"/>
        <IncludeRules context="##Comments"/>
        <DetectIdentifier attribute="Comment"/>
      </context>


      <context name="QString" attribute="String" lineEndContext="#stay">
        <DetectChar attribute="String" context="#pop" char="&quot;"/>
        <DetectChar attribute="Escape" context="EscapedChar" char="\"/>
      </context>
      <context name="EscapedChar" attribute="Escape" lineEndContext="#pop">
        <RegExpr attribute="Escape" context="#pop" String="[nrt'&quot;\\]|x[0-9a-fA-F]{2}|u\{[0-9a-fA-F]+\}"/>
        <RegExpr attribute="Error" context="#pop" String="x[0-9a-fA-F]?|u\{[0-9a-fA-F]{0,8}\}?|."/>
      </context>

      <context name="MultilineString" attribute="Multiline String" lineEndContext="#pop">
      </context>

      <context name="Character" attribute="Character" lineEndContext="#pop">
        <RegExpr attribute="Character" context="#pop!ValidChar" String="'(?=(\\([nrt'&quot;\\]|x[0-9a-fA-F]{2}|u\{[0-9a-fA-F]+\})|[^\\'])')"/>
        <RegExpr attribute="Error" context="#pop" String="'(\\(x[0-9a-fA-F]?|u\{[0-9a-fA-F]{0,8}\}?|.?)?)?"/>
      </context>
      <context name="ValidChar" attribute="Character" lineEndContext="#pop">
        <DetectChar attribute="Character" context="#pop" char="'"/>
        <DetectChar attribute="Escape" context="EscapedChar" char="\"/>
      </context>


      <context name="Number" attribute="Normal Text" lineEndContext="#pop">
        <RegExpr attribute="Float" context="#pop!SuffixNumber" String="&dec_int;(\.&dec_int;&exp_float;?|&exp_float;)"/>
        <RegExpr attribute="Decimal" context="#pop!SuffixNumber" String="(?=0[xob])|&dec_int;"/>
        <RegExpr attribute="Hex Float" context="#pop!SuffixNumber" String="0x&hex_int;(\.&hex_int;&exp_hexfloat;?|&exp_hexfloat;)"/>
        <RegExpr attribute="Hex" context="#pop!SuffixNumber" String="0x&hex_int;"/>
        <RegExpr attribute="Octal" context="#pop!SuffixNumber" String="0o&oct_int;"/>
        <RegExpr attribute="Binary" context="#pop!SuffixNumber" String="0b&bin_int;"/>
        <DetectChar attribute="Decimal" context="#pop!SuffixNumber" char="0"/>
      </context>
      <context name="SuffixNumber" attribute="Normal Text" lineEndContext="#pop" fallthroughContext="#pop">
        <AnyChar attribute="Error" String=".0123456789" context="#pop"/>
        <DetectIdentifier attribute="Error" context="#pop"/>
      </context>


      <context name="BuiltinFunctions" attribute="Normal Text" lineEndContext="#pop">
        <RegExpr attribute="Builtin Function" context="#pop" String="@[a-zA-Z0-9]*"/>
      </context>

      <context name="SpecialType" attribute="Normal Text" lineEndContext="#pop">
        <!-- i or u followed by digits. The maximum allowed bit-width of an integer type is 65535 -->
        <RegExpr attribute="Type" context="#pop" String="\b[ui]([0-9]{1,4}|[1-5][0-9]{4}|6([0-4][0-9]{3}|5([0-4][0-9]{2}|5([0-2][0-9]|3[0-5]))))\b"/>
        <DetectIdentifier attribute="Normal Text" context="#pop"/>
      </context>

    </contexts>

    <itemDatas>
      <itemData name="Normal Text"      defStyleNum="dsNormal" spellChecking="false"/>
      <itemData name="Control Flow"     defStyleNum="dsControlFlow" spellChecking="false"/>
      <itemData name="Async Keyword"    defStyleNum="dsControlFlow" spellChecking="false"/>
      <itemData name="Declaration"      defStyleNum="dsKeyword" spellChecking="false"/>
      <itemData name="Keyword"          defStyleNum="dsKeyword" spellChecking="false"/>
      <itemData name="Type"             defStyleNum="dsDataType" spellChecking="false"/>
      <itemData name="Float"            defStyleNum="dsFloat" spellChecking="false"/>
      <itemData name="Hex Float"        defStyleNum="dsFloat" spellChecking="false"/>
      <itemData name="Decimal"          defStyleNum="dsDecVal" spellChecking="false"/>
      <itemData name="Hex"              defStyleNum="dsBaseN" spellChecking="false"/>
      <itemData name="Octal"            defStyleNum="dsBaseN" spellChecking="false"/>
      <itemData name="Binary"           defStyleNum="dsBaseN" spellChecking="false"/>
      <itemData name="Character"        defStyleNum="dsChar" spellChecking="false"/>
      <itemData name="String"           defStyleNum="dsString"/>
      <itemData name="Multiline String" defStyleNum="dsVerbatimString"/>
      <itemData name="Escape"           defStyleNum="dsSpecialChar" spellChecking="false"/>
      <itemData name="Comment"          defStyleNum="dsComment"/>
      <itemData name="Preprocessor"     defStyleNum="dsPreprocessor" spellChecking="false"/>
      <itemData name="Self Variable"    defStyleNum="dsVariable" spellChecking="false"/>
      <itemData name="Constants"        defStyleNum="dsKeyword" spellChecking="false"/>
      <itemData name="Error"            defStyleNum="dsError" spellChecking="false"/>
      <itemData name="Modifier"         defStyleNum="dsAttribute" spellChecking="false"/>
      <itemData name="Builtin Function" defStyleNum="dsImport" spellChecking="false"/>
      <itemData name="Operator"         defStyleNum="dsOperator" spellChecking="false"/>
      <itemData name="Symbol"           defStyleNum="dsNormal" spellChecking="false"/>
      <itemData name="Separator Symbol" defStyleNum="dsNormal" spellChecking="false"/>
    </itemDatas>
  </highlighting>
  <general>
    <comments>
      <comment name="singleLine" start="//" position="afterwhitespace"/>
    </comments>
    <keywords casesensitive="1"/>
  </general>
</language>
<!-- kate: replace-tabs on; tab-width 2; indent-width 2; -->
